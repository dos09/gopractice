package main

import (
	"fmt"
	"golang.org/x/tour/tree"
	"sort"
)

// Walk walks the tree t sending all values
// from the tree to the channel ch.
func Walk(t *tree.Tree, ch chan int) {
	ch <- t.Value
	left := t.Left
	right := t.Right
	if left != nil {
		Walk(left, ch)
	}
	if right != nil {
		Walk(right, ch)
	}
}

// Same determines whether the trees
// t1 and t2 contain the same values.
func Same(t1, t2 *tree.Tree) bool {
	var s1, s2 []int
	c := make(chan int, 10)
	go Walk(t1, c)
	for i := 0; i < 10; i++ {
		s1 = append(s1, <- c)
	}
	c = make(chan int, 10)
	go Walk(t2, c)
	for i := 0; i < 10; i++ {
		s2 = append(s2, <- c)
	}
	sort.Ints(s1)
	sort.Ints(s2)
	fmt.Println(s1)
	fmt.Println(s2)
	for i := 0; i < 10; i++ {
		if s1[i] != s2[i] {
			return false
		}
	}
	
	return true
}

func main() {
	t := Same(tree.New(1), tree.New(1))
	fmt.Println(t)
	t = Same(tree.New(2), tree.New(1))
	fmt.Println(t)
	
}
